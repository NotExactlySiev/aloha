cross   = mipsel-linux-gnu-

jfdir   = tools/jfcomp
jfcomp  = $jfdir/jfcomp

makeiso = mkpsxiso
dumpiso = dumpsxiso

cflags  = -Iinclude -Ipsyq $
          -O1 -G0 -fno-zero-initialized-in-bss -msoft-float $
          -march=r3000 -mtune=r3000 -mabi=32 -EL -mno-abicalls $
          -fno-stack-protector
ldflags = --no-check-sections -nostdlib -s

cflagsnat   = -O2



# TODO: using the included standard libraries or a nugget one
# TODO: make a script to generate this file automatically

rule ccnat
    command = gcc $cflagsnative $in -o $out

rule cc
    command = ${cross}gcc $cflags -c $in -o $out

rule link
    command = ${cross}ld $ldflagas -Map=build/$modid.map $
              -T $modid.ld -T symbols.$modid.ld $in -o $out
rule objcopy
    command = ${cross}objcopy -O binary $in $out

rule copy
    command = cp $in $out

rule decomp
    command = $jfcomp decomp $in $out

rule comp
    command = $jfcomp comp $in $out

rule mkiso
    command = $makeiso -y $in -o $out
# todo: this is ugly: 
rule dumpiso
    command = $dumpiso -s us.xml $in -x $out

### building the tools (jfcomp, mkpsxiso etc.)
build tools: phony $jfcomp

build $jfcomp: ccnat $jfdir/main.c $jfdir/comp.c $jfdir/decomp.c

### building the objects
build obj_common: phony build/header.o

build build/header.o: cc src/header.s
build build/gameover/C094.o: cc src/gameover/C094.c
build build/gameover/800.rodata.o: cc asm/gameover/data/800.rodata.s
build build/gameover/DAB0.data.o: cc asm/gameover/data/DAB0.data.s

### building the executables (linker)

d   = fuck

build build/gameover.elf: link build/header.o $
                          build/gameover/C094.o $
                          build/gameover/800.rodata.o $
                          build/gameover/DAB0.data.o
    modid = gameover

### compressing and putting them in the disc structure
# TODO: just generate them already in the structure
# build the files we have decompiled
build build/gameover.exe: objcopy build/gameover.elf
build build/disc/GAMEOVER.PEX: comp build/gameover.exe

orig    = original
dest    = build/disc
# copy everything else from the original disc
build $dest/license_data.dat: copy $orig/license_data.dat
build $dest/COUNTRY.TXT: copy $orig/COUNTRY.TXT
build $dest/SELECT.PEX: copy $orig/SELECT.PEX
build $dest/SYSTEM.CNF: copy $orig/SYSTEM.CNF
# ...

### generating the disc
build aloha.bin: mkiso us.xml | build/GAMEOVER.PEX

### extra: rules for extracting the data from the original disc
# TODO: maybe these should just be a shell script?
# TODO: the xml points to the original
rule chdman
    command = chdman extractcd -i $in -o $out

d   = original
build $d/us/ | us.xml: dumpiso $d/us.bin
build extract: phony $d/us/

default aloha.bin
