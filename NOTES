## Overall Direction of this Decompilation
Splat is a flexible tool capable of many different things.
I aim to use only a limited subset of its features. I think I'm
just gonna leave the nonmatching inside the repository, I'm not
worried about the legallity of that. The asset files should be
ripped from the original image anyway. So I think leaving the
original code is fine.
Splat therefore is good for generating the initial set of those
along with the initial C files. But after that I can't think
of much else it can be used for. It assumes your project to be
a matching decompilation (at least as far as I can tell), which
Aloha is not. And I don't see much upside to maintaining two
sets of symbol files, one for the linker and one for Splat. I'm
already trying to merge all of the linker scripts into a single
shared one anyway.


## Compiler
*this part related to matching the binaries is no longer relevant*
I think the standard libraries are compiled using PSYQ-3.5 but the game code itself is compiled using gcc 2.8.1 from PSYQ-4.3


## 274C.c

Memory map of data sections:

80047d04    libspu vars
80047d44    main.c vars
80047d74    274C.c vars
80047e6c    main.c vars (but could belong to 274C too maybe)
80047e84    274C.c vars
uninitialized
80048000    274C.c vars
80048044    main.c vars
(big buffers in this part for 274C.c)
80052248    libgpu data
...         other standard lib data




## JM1/MAIN.PEX

It seems to have libgpu linked into it again. Since it's very likely that it's the same
version of the library as the one in main, it should be possible to find duplicates.
It still uses the LoadImage and DrawSync functions that are provided in the jmptable,
so I don't know what exactly is going on there. There is a good chunk of libgpu included
in it tho.

In addition to that it has something we haven't dealt with yet: libgte. This file actually
is going to be doing 3D rendering so things are about to get interesting.
The file map doesn't seem to be as tidy and organized as main. Gonna have to figure it out.

800B0000    .rodata     loads of switch case tables

800B0A68    game code   .text

800DB018    game code (seperate objects?) (uses jtp)
            some libgpu again
800DF1E4    game code (i'm pretty sure)
800C6BD4    libgpu
800C98F8    libgte
800CC338    libetc (yay, the entire gang is back!)

800FD400    .data
\
801383F0    various lists of pointers (to entities, but maybe more)

80103000

80060000 is where COM_DAT.EAR is loaded by SELECT.PEX
